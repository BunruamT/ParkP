-- === STEP 1: Initial Schema === --

-- CreateEnum
CREATE TYPE "UserRole" AS ENUM ('CUSTOMER', 'OWNER', 'ADMIN');

-- CreateEnum
CREATE TYPE "BookingStatus" AS ENUM ('PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED', 'EXTENDED');

-- CreateEnum
CREATE TYPE "ParkingSpotStatus" AS ENUM ('ACTIVE', 'INACTIVE', 'MAINTENANCE');

-- CreateEnum
CREATE TYPE "PaymentStatus" AS ENUM ('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED');

-- CreateEnum
CREATE TYPE "PaymentMethod" AS ENUM ('CREDIT_CARD', 'DEBIT_CARD', 'QR_PAYMENT', 'E_WALLET');

-- CreateTable
CREATE TABLE "users" (
    "id" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "password" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "phone" TEXT,
    "role" "UserRole" NOT NULL DEFAULT 'CUSTOMER',
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    "businessName" TEXT,
    "businessAddress" TEXT,

    CONSTRAINT "users_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "vehicles" (
    "id" TEXT NOT NULL,
    "make" TEXT NOT NULL,
    "model" TEXT NOT NULL,
    "licensePlate" TEXT NOT NULL,
    "color" TEXT NOT NULL,
    "userId" TEXT NOT NULL,

    CONSTRAINT "vehicles_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "parking_spots" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "address" TEXT NOT NULL,
    "latitude" DOUBLE PRECISION NOT NULL,
    "longitude" DOUBLE PRECISION NOT NULL,
    "price" DOUBLE PRECISION NOT NULL,
    "priceType" TEXT NOT NULL,
    "totalSlots" INTEGER NOT NULL,
    "availableSlots" INTEGER NOT NULL,
    "rating" DOUBLE PRECISION NOT NULL DEFAULT 0,
    "reviewCount" INTEGER NOT NULL DEFAULT 0,
    "amenities" TEXT[],
    "images" TEXT[],
    "openingHours" TEXT NOT NULL,
    "phone" TEXT,
    "status" "ParkingSpotStatus" NOT NULL DEFAULT 'ACTIVE',
    "ownerId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "parking_spots_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "availability_slots" (
    "id" TEXT NOT NULL,
    "spotId" TEXT NOT NULL,
    "date" TIMESTAMP(3) NOT NULL,
    "startTime" TEXT NOT NULL,
    "endTime" TEXT NOT NULL,
    "status" TEXT NOT NULL,
    "reason" TEXT,
    "slotsAffected" INTEGER NOT NULL DEFAULT 1,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "availability_slots_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "bookings" (
    "id" TEXT NOT NULL,
    "spotId" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "vehicleId" TEXT NOT NULL,
    "startTime" TIMESTAMP(3) NOT NULL,
    "endTime" TIMESTAMP(3) NOT NULL,
    "actualEndTime" TIMESTAMP(3),
    "reservedEndTime" TIMESTAMP(3) NOT NULL,
    "totalCost" DOUBLE PRECISION NOT NULL,
    "status" "BookingStatus" NOT NULL DEFAULT 'PENDING',
    "qrCode" TEXT NOT NULL,
    "pin" TEXT NOT NULL,
    "isExtended" BOOLEAN NOT NULL DEFAULT false,
    "extendedAt" TIMESTAMP(3),
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "bookings_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "payments" (
    "id" TEXT NOT NULL,
    "bookingId" TEXT NOT NULL,
    "amount" DOUBLE PRECISION NOT NULL,
    "method" "PaymentMethod" NOT NULL,
    "status" "PaymentStatus" NOT NULL DEFAULT 'PENDING',
    "transactionId" TEXT,
    "processedAt" TIMESTAMP(3),
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "payments_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "entry_logs" (
    "id" TEXT NOT NULL,
    "bookingId" TEXT NOT NULL,
    "action" TEXT NOT NULL,
    "timestamp" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "method" TEXT NOT NULL,
    "code" TEXT NOT NULL,

    CONSTRAINT "entry_logs_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "reviews" (
    "id" TEXT NOT NULL,
    "spotId" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "rating" INTEGER NOT NULL,
    "comment" TEXT,
    "photos" TEXT[],
    "isAnonymous" BOOLEAN NOT NULL DEFAULT false,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "reviews_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "notifications" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "message" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "isRead" BOOLEAN NOT NULL DEFAULT false,
    "data" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "notifications_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "system_settings" (
    "id" TEXT NOT NULL,
    "key" TEXT NOT NULL,
    "value" TEXT NOT NULL,
    "description" TEXT,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "system_settings_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "users_email_key" ON "users"("email");

-- CreateIndex
CREATE UNIQUE INDEX "bookings_qrCode_key" ON "bookings"("qrCode");

-- CreateIndex
CREATE UNIQUE INDEX "payments_bookingId_key" ON "payments"("bookingId");

-- CreateIndex
CREATE UNIQUE INDEX "system_settings_key_key" ON "system_settings"("key");

-- AddForeignKey
ALTER TABLE "vehicles" ADD CONSTRAINT "vehicles_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "parking_spots" ADD CONSTRAINT "parking_spots_ownerId_fkey" FOREIGN KEY ("ownerId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "availability_slots" ADD CONSTRAINT "availability_slots_spotId_fkey" FOREIGN KEY ("spotId") REFERENCES "parking_spots"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "bookings" ADD CONSTRAINT "bookings_spotId_fkey" FOREIGN KEY ("spotId") REFERENCES "parking_spots"("id") ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "bookings" ADD CONSTRAINT "bookings_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "bookings" ADD CONSTRAINT "bookings_vehicleId_fkey" FOREIGN KEY ("vehicleId") REFERENCES "vehicles"("id") ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "payments" ADD CONSTRAINT "payments_bookingId_fkey" FOREIGN KEY ("bookingId") REFERENCES "bookings"("id") ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "entry_logs" ADD CONSTRAINT "entry_logs_bookingId_fkey" FOREIGN KEY ("bookingId") REFERENCES "bookings"("id") ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "reviews" ADD CONSTRAINT "reviews_spotId_fkey" FOREIGN KEY ("spotId") REFERENCES "parking_spots"("id") ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "reviews" ADD CONSTRAINT "reviews_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "notifications" ADD CONSTRAINT "notifications_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- === STEP 2: Schema Fixes, Indexes, and RLS === --

/*
  # Update schema for better naming conventions
  
  1. Update column names to use snake_case for consistency
  2. Add proper indexes for performance
  3. Add RLS policies for security
  4. Add triggers for automatic timestamps
*/

-- Update column names to snake_case
ALTER TABLE users RENAME COLUMN "isActive" TO is_active;
ALTER TABLE users RENAME COLUMN "createdAt" TO created_at;
ALTER TABLE users RENAME COLUMN "updatedAt" TO updated_at;
ALTER TABLE users RENAME COLUMN "businessName" TO business_name;
ALTER TABLE users RENAME COLUMN "businessAddress" TO business_address;

ALTER TABLE vehicles RENAME COLUMN "licensePlate" TO license_plate;
ALTER TABLE vehicles RENAME COLUMN "userId" TO user_id;

ALTER TABLE parking_spots RENAME COLUMN "priceType" TO price_type;
ALTER TABLE parking_spots RENAME COLUMN "totalSlots" TO total_slots;
ALTER TABLE parking_spots RENAME COLUMN "availableSlots" TO available_slots;
ALTER TABLE parking_spots RENAME COLUMN "reviewCount" TO review_count;
ALTER TABLE parking_spots RENAME COLUMN "openingHours" TO opening_hours;
ALTER TABLE parking_spots RENAME COLUMN "ownerId" TO owner_id;
ALTER TABLE parking_spots RENAME COLUMN "createdAt" TO created_at;
ALTER TABLE parking_spots RENAME COLUMN "updatedAt" TO updated_at;

ALTER TABLE availability_slots RENAME COLUMN "spotId" TO spot_id;
ALTER TABLE availability_slots RENAME COLUMN "startTime" TO start_time;
ALTER TABLE availability_slots RENAME COLUMN "endTime" TO end_time;
ALTER TABLE availability_slots RENAME COLUMN "slotsAffected" TO slots_affected;
ALTER TABLE availability_slots RENAME COLUMN "createdAt" TO created_at;
ALTER TABLE availability_slots RENAME COLUMN "updatedAt" TO updated_at;

ALTER TABLE bookings RENAME COLUMN "spotId" TO spot_id;
ALTER TABLE bookings RENAME COLUMN "userId" TO user_id;
ALTER TABLE bookings RENAME COLUMN "vehicleId" TO vehicle_id;
ALTER TABLE bookings RENAME COLUMN "startTime" TO start_time;
ALTER TABLE bookings RENAME COLUMN "endTime" TO end_time;
ALTER TABLE bookings RENAME COLUMN "actualEndTime" TO actual_end_time;
ALTER TABLE bookings RENAME COLUMN "reservedEndTime" TO reserved_end_time;
ALTER TABLE bookings RENAME COLUMN "totalCost" TO total_cost;
ALTER TABLE bookings RENAME COLUMN "qrCode" TO qr_code;
ALTER TABLE bookings RENAME COLUMN "isExtended" TO is_extended;
ALTER TABLE bookings RENAME COLUMN "extendedAt" TO extended_at;
ALTER TABLE bookings RENAME COLUMN "createdAt" TO created_at;
ALTER TABLE bookings RENAME COLUMN "updatedAt" TO updated_at;

ALTER TABLE payments RENAME COLUMN "bookingId" TO booking_id;
ALTER TABLE payments RENAME COLUMN "transactionId" TO transaction_id;
ALTER TABLE payments RENAME COLUMN "processedAt" TO processed_at;
ALTER TABLE payments RENAME COLUMN "createdAt" TO created_at;
ALTER TABLE payments RENAME COLUMN "updatedAt" TO updated_at;

ALTER TABLE entry_logs RENAME COLUMN "bookingId" TO booking_id;

ALTER TABLE reviews RENAME COLUMN "spotId" TO spot_id;
ALTER TABLE reviews RENAME COLUMN "userId" TO user_id;
ALTER TABLE reviews RENAME COLUMN "isAnonymous" TO is_anonymous;
ALTER TABLE reviews RENAME COLUMN "createdAt" TO created_at;
ALTER TABLE reviews RENAME COLUMN "updatedAt" TO updated_at;

ALTER TABLE notifications RENAME COLUMN "userId" TO user_id;
ALTER TABLE notifications RENAME COLUMN "isRead" TO is_read;
ALTER TABLE notifications RENAME COLUMN "createdAt" TO created_at;

ALTER TABLE system_settings RENAME COLUMN "updatedAt" TO updated_at;

-- Update foreign key constraint names
ALTER TABLE vehicles DROP CONSTRAINT "vehicles_userId_fkey";
ALTER TABLE vehicles ADD CONSTRAINT "vehicles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE parking_spots DROP CONSTRAINT "parking_spots_ownerId_fkey";
ALTER TABLE parking_spots ADD CONSTRAINT "parking_spots_owner_id_fkey" FOREIGN KEY ("owner_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE availability_slots DROP CONSTRAINT "availability_slots_spotId_fkey";
ALTER TABLE availability_slots ADD CONSTRAINT "availability_slots_spot_id_fkey" FOREIGN KEY ("spot_id") REFERENCES "parking_spots"("id") ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE bookings DROP CONSTRAINT "bookings_spotId_fkey";
ALTER TABLE bookings DROP CONSTRAINT "bookings_userId_fkey";
ALTER TABLE bookings DROP CONSTRAINT "bookings_vehicleId_fkey";
ALTER TABLE bookings ADD CONSTRAINT "bookings_spot_id_fkey" FOREIGN KEY ("spot_id") REFERENCES "parking_spots"("id") ON UPDATE CASCADE;
ALTER TABLE bookings ADD CONSTRAINT "bookings_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON UPDATE CASCADE;
ALTER TABLE bookings ADD CONSTRAINT "bookings_vehicle_id_fkey" FOREIGN KEY ("vehicle_id") REFERENCES "vehicles"("id") ON UPDATE CASCADE;

ALTER TABLE payments DROP CONSTRAINT "payments_bookingId_fkey";
ALTER TABLE payments ADD CONSTRAINT "payments_booking_id_fkey" FOREIGN KEY ("booking_id") REFERENCES "bookings"("id") ON UPDATE CASCADE;

ALTER TABLE entry_logs DROP CONSTRAINT "entry_logs_bookingId_fkey";
ALTER TABLE entry_logs ADD CONSTRAINT "entry_logs_booking_id_fkey" FOREIGN KEY ("booking_id") REFERENCES "bookings"("id") ON UPDATE CASCADE;

ALTER TABLE reviews DROP CONSTRAINT "reviews_spotId_fkey";
ALTER TABLE reviews DROP CONSTRAINT "reviews_userId_fkey";
ALTER TABLE reviews ADD CONSTRAINT "reviews_spot_id_fkey" FOREIGN KEY ("spot_id") REFERENCES "parking_spots"("id") ON UPDATE CASCADE;
ALTER TABLE reviews ADD CONSTRAINT "reviews_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON UPDATE CASCADE;

ALTER TABLE notifications DROP CONSTRAINT "notifications_userId_fkey";
ALTER TABLE notifications ADD CONSTRAINT "notifications_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- Update unique constraint names
DROP INDEX IF EXISTS "bookings_qrCode_key";
ALTER TABLE bookings ADD CONSTRAINT "bookings_qr_code_key" UNIQUE ("qr_code");

DROP INDEX IF EXISTS "payments_bookingId_key";
ALTER TABLE payments ADD CONSTRAINT "payments_booking_id_key" UNIQUE ("booking_id");

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_parking_spots_location ON parking_spots USING GIST (
  ll_to_earth(latitude::float8, longitude::float8)
);
CREATE INDEX IF NOT EXISTS idx_parking_spots_owner_id ON parking_spots(owner_id);
CREATE INDEX IF NOT EXISTS idx_parking_spots_status ON parking_spots(status);
CREATE INDEX IF NOT EXISTS idx_parking_spots_price ON parking_spots(price);

CREATE INDEX IF NOT EXISTS idx_bookings_user_id ON bookings(user_id);
CREATE INDEX IF NOT EXISTS idx_bookings_spot_id ON bookings(spot_id);
CREATE INDEX IF NOT EXISTS idx_bookings_status ON bookings(status);
CREATE INDEX IF NOT EXISTS idx_bookings_start_time ON bookings(start_time);
CREATE INDEX IF NOT EXISTS idx_bookings_qr_code ON bookings(qr_code);
CREATE INDEX IF NOT EXISTS idx_bookings_pin ON bookings(pin);

CREATE INDEX IF NOT EXISTS idx_vehicles_user_id ON vehicles(user_id);
CREATE INDEX IF NOT EXISTS idx_reviews_spot_id ON reviews(spot_id);
CREATE INDEX IF NOT EXISTS idx_reviews_user_id ON reviews(user_id);
CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_notifications_is_read ON notifications(is_read);

-- Enable Row Level Security
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE vehicles ENABLE ROW LEVEL SECURITY;
ALTER TABLE parking_spots ENABLE ROW LEVEL SECURITY;
ALTER TABLE availability_slots ENABLE ROW LEVEL SECURITY;
ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;
ALTER TABLE payments ENABLE ROW LEVEL SECURITY;
ALTER TABLE entry_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- RLS Policies for users table
CREATE POLICY "Users can read own profile" ON users
  FOR SELECT USING (auth.uid()::text = id);

CREATE POLICY "Users can update own profile" ON users
  FOR UPDATE USING (auth.uid()::text = id);

-- RLS Policies for vehicles table
CREATE POLICY "Users can manage own vehicles" ON vehicles
  FOR ALL USING (auth.uid()::text = user_id);

-- RLS Policies for parking_spots table
CREATE POLICY "Anyone can read active parking spots" ON parking_spots
  FOR SELECT USING (status = 'ACTIVE');

CREATE POLICY "Owners can manage own parking spots" ON parking_spots
  FOR ALL USING (auth.uid()::text = owner_id);

-- RLS Policies for bookings table
CREATE POLICY "Users can read own bookings" ON bookings
  FOR SELECT USING (auth.uid()::text = user_id);

CREATE POLICY "Users can create own bookings" ON bookings
  FOR INSERT WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can update own bookings" ON bookings
  FOR UPDATE USING (auth.uid()::text = user_id);

CREATE POLICY "Spot owners can read bookings for their spots" ON bookings
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM parking_spots 
      WHERE parking_spots.id = bookings.spot_id 
      AND parking_spots.owner_id = auth.uid()::text
    )
  );

-- RLS Policies for reviews table
CREATE POLICY "Anyone can read reviews" ON reviews
  FOR SELECT USING (true);

CREATE POLICY "Users can create reviews" ON reviews
  FOR INSERT WITH CHECK (auth.uid()::text = user_id);

CREATE POLICY "Users can update own reviews" ON reviews
  FOR UPDATE USING (auth.uid()::text = user_id);

CREATE POLICY "Users can delete own reviews" ON reviews
  FOR DELETE USING (auth.uid()::text = user_id);

-- RLS Policies for notifications table
CREATE POLICY "Users can read own notifications" ON notifications
  FOR SELECT USING (auth.uid()::text = user_id);

CREATE POLICY "Users can update own notifications" ON notifications
  FOR UPDATE USING (auth.uid()::text = user_id);

-- Function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add triggers for automatic timestamp updates
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_parking_spots_updated_at BEFORE UPDATE ON parking_spots
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_availability_slots_updated_at BEFORE UPDATE ON availability_slots
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_bookings_updated_at BEFORE UPDATE ON bookings
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_payments_updated_at BEFORE UPDATE ON payments
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_reviews_updated_at BEFORE UPDATE ON reviews
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_system_settings_updated_at BEFORE UPDATE ON system_settings
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- === STEP 3: Seed Data === --


-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS cube;
CREATE EXTENSION IF NOT EXISTS earthdistance;

-- Seed data for ParkPass application

-- Insert test users (include password + updated_at)
INSERT INTO users (id, email, password, name, phone, role, business_name, business_address, updated_at) VALUES
  ('user-admin-1', 'admin@parkpass.com', 'adminpass123', 'Admin User', '+1-555-0001', 'ADMIN', NULL, NULL, CURRENT_TIMESTAMP),
  ('user-owner-1', 'owner1@parkpass.com', 'ownerpass123', 'John Smith', '+1-555-0002', 'OWNER', 'Downtown Parking Solutions', '123 Business Ave, Downtown', CURRENT_TIMESTAMP),
  ('user-owner-2', 'owner2@parkpass.com', 'ownerpass456', 'Sarah Johnson', '+1-555-0003', 'OWNER', 'Mall Parking Services', '456 Mall Road, Westside', CURRENT_TIMESTAMP),
  ('user-customer-1', 'customer1@parkpass.com', 'custpass123', 'Mike Wilson', '+1-555-0004', 'CUSTOMER', NULL, NULL, CURRENT_TIMESTAMP),
  ('user-customer-2', 'customer2@parkpass.com', 'custpass456', 'Emily Davis', '+1-555-0005', 'CUSTOMER', NULL, NULL, CURRENT_TIMESTAMP)
ON CONFLICT (id) DO NOTHING;



INSERT INTO vehicles (id, make, model, license_plate, color, user_id) VALUES
  ('vehicle-1', 'Toyota', 'Camry', 'ABC-123', 'Silver', 'user-customer-1'),
  ('vehicle-2', 'Honda', 'Civic', 'XYZ-789', 'Blue', 'user-customer-1'),
  ('vehicle-3', 'BMW', 'X3', 'BMW-456', 'Black', 'user-customer-2')
ON CONFLICT (id) DO NOTHING;

-- Insert test parking spots
INSERT INTO parking_spots (
  id, name, description, address, latitude, longitude, price, price_type,
  total_slots, available_slots, rating, review_count, amenities, images,
  opening_hours, phone, owner_id, updated_at
) VALUES
  (
    'spot-1',
    'Central Plaza Parking',
    'Premium parking facility in the heart of downtown with state-of-the-art security and amenities.',
    '123 Main Street, Downtown',
    40.7589, -73.9851, 25, 'hour',
    50, 45, 4.5, 128,
    ARRAY['CCTV Security', 'EV Charging', 'Covered Parking', 'Elevator Access'],
    ARRAY[
      'https://images.pexels.com/photos/753876/pexels-photo-753876.jpeg?auto=compress&cs=tinysrgb&w=800',
      'https://images.pexels.com/photos/164634/pexels-photo-164634.jpeg?auto=compress&cs=tinysrgb&w=800'
    ],
    '24/7', '+1-555-123-4567', 'user-owner-1', CURRENT_TIMESTAMP
  ),
  (
    'spot-2',
    'Riverside Mall Parking',
    'Convenient mall parking with direct access to shopping and dining.',
    '456 River Road, Westside',
    40.7505, -73.9934, 150, 'day',
    200, 180, 4.2, 89,
    ARRAY['Shopping Access', 'Food Court Nearby', 'Valet Service', 'Car Wash'],
    ARRAY[
      'https://images.pexels.com/photos/1004409/pexels-photo-1004409.jpeg?auto=compress&cs=tinysrgb&w=800',
      'https://images.pexels.com/photos/2199293/pexels-photo-2199293.jpeg?auto=compress&cs=tinysrgb&w=800'
    ],
    '6:00 AM - 11:00 PM', '+1-555-987-6543', 'user-owner-2', CURRENT_TIMESTAMP
  ),
  (
    'spot-3',
    'Airport Express Parking',
    'Premium airport parking with complimentary shuttle service and full-service amenities.',
    '789 Airport Way, Terminal District',
    40.6413, -73.7781, 300, 'day',
    800, 750, 4.7, 342,
    ARRAY['Shuttle Service', 'Long-term Storage', 'Car Detailing', 'Luggage Assistance'],
    ARRAY[
      'https://images.pexels.com/photos/2425567/pexels-photo-2425567.jpeg?auto=compress&cs=tinysrgb&w=800',
      'https://images.pexels.com/photos/1004409/pexels-photo-1004409.jpeg?auto=compress&cs=tinysrgb&w=800'
    ],
    '24/7', '+1-555-456-7890', 'user-owner-1', CURRENT_TIMESTAMP
  )
ON CONFLICT (id) DO NOTHING;

-- Insert test reviews
INSERT INTO reviews (id, spot_id, user_id, rating, comment, is_anonymous, updated_at) VALUES
  ('review-1', 'spot-1', 'user-customer-1', 5, 'Excellent parking facility with great security and easy access. Highly recommended!', false, CURRENT_TIMESTAMP),
  ('review-2', 'spot-1', 'user-customer-2', 4, 'Good location and clean facilities. The EV charging station was very convenient.', false, CURRENT_TIMESTAMP),
  ('review-3', 'spot-2', 'user-customer-1', 4, 'Perfect for shopping trips. Direct mall access is a huge plus.', false, CURRENT_TIMESTAMP)
ON CONFLICT (id) DO NOTHING;

-- Insert system settings
INSERT INTO system_settings (id, key, value, description, updated_at) VALUES
  ('setting-1', 'BOOKING_BUFFER_HOURS', '1', 'Buffer time in hours added to each booking', CURRENT_TIMESTAMP),
  ('setting-2', 'MAX_EXTENSION_HOURS', '1', 'Maximum hours a booking can be extended', CURRENT_TIMESTAMP),
  ('setting-3', 'CANCELLATION_DEADLINE_HOURS', '1', 'Minimum hours before start time to allow cancellation', CURRENT_TIMESTAMP),
  ('setting-4', 'NOTIFICATION_REMINDER_HOURS', '1', 'Hours before booking start to send reminder', CURRENT_TIMESTAMP)
ON CONFLICT (id) DO NOTHING;
